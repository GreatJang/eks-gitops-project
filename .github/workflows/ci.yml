name: CI - Build and Push to ECR

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: flask-app

jobs:
  build-and-push:
    name: Build & Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout source code
        uses: actions/checkout@v3

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîë Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: üîç Get Latest ECR Tag and Increment
        id: get-latest-tag
        run: |
          set -e
          REPO_NAME="${{ env.ECR_REPOSITORY }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REGION="${{ env.AWS_REGION }}"
          IMAGE_REPO="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME"

          echo "Fetching latest tag from: $IMAGE_REPO"
          LATEST_TAG=$(aws ecr describe-images \
            --repository-name $REPO_NAME \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
            --output text || echo "none")

          echo "Latest tag: $LATEST_TAG"

          if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            NEW_TAG="v${MAJOR}.$((MINOR + 1))"
          else
            NEW_TAG="v1.1"
          fi

          echo "New tag: $NEW_TAG"
          echo "IMAGE_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: üê≥ Build, tag, and push image to Amazon ECR
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG